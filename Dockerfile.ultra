# Ultra-simple Dockerfile - no external file dependencies
FROM python:3.11-slim

# Install everything in one RUN command
RUN apt-get update && \
    apt-get install -y curl && \
    pip install Flask==2.3.3 Werkzeug==2.3.7 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /app /tmp/scans

# Set working directory
WORKDIR /app

# Create the application file directly in the Dockerfile
RUN echo '#!/usr/bin/env python3\n\
import os\n\
import json\n\
import uuid\n\
import time\n\
import threading\n\
import tempfile\n\
import shutil\n\
from datetime import datetime\n\
from flask import Flask, request, jsonify\n\
\n\
app = Flask(__name__)\n\
app.config["SECRET_KEY"] = "dev-key"\n\
scans = {}\n\
\n\
HTML = """<!DOCTYPE html>\n\
<html><head><title>Attack Surface Scanner</title>\n\
<style>\n\
body{font-family:Arial,sans-serif;max-width:800px;margin:50px auto;padding:20px;background:#f5f5f5}\n\
.container{background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}\n\
h1{color:#333;text-align:center;margin-bottom:30px}\n\
.form-group{margin-bottom:20px}\n\
label{display:block;margin-bottom:5px;font-weight:bold}\n\
input{width:100%;padding:10px;border:1px solid #ddd;border-radius:5px;font-size:16px}\n\
button{background:#007bff;color:white;padding:12px 24px;border:none;border-radius:5px;cursor:pointer;font-size:16px}\n\
button:hover{background:#0056b3}\n\
.progress{display:none;margin:20px 0}\n\
.progress-bar{width:100%;height:20px;background:#e9ecef;border-radius:10px;overflow:hidden}\n\
.progress-fill{height:100%;background:#007bff;width:0%;transition:width 0.3s}\n\
.results{display:none;margin-top:20px}\n\
.result-section{margin:20px 0;padding:15px;background:#f8f9fa;border-radius:5px}\n\
.result-item{padding:5px 0;border-bottom:1px solid #eee;font-family:monospace}\n\
</style></head><body>\n\
<div class="container">\n\
<h1>üîç Attack Surface Scanner</h1>\n\
<form id="scanForm">\n\
<div class="form-group">\n\
<label for="domain">Target Domain:</label>\n\
<input type="text" id="domain" placeholder="example.com" required>\n\
</div>\n\
<button type="submit">Start Scan</button>\n\
</form>\n\
<div class="progress" id="progress">\n\
<div class="progress-bar"><div class="progress-fill" id="progressFill"></div></div>\n\
<p id="progressText">Starting scan...</p>\n\
</div>\n\
<div class="results" id="results">\n\
<div class="result-section">\n\
<h3>Subdomains (<span id="subCount">0</span>)</h3>\n\
<div id="subList"></div>\n\
</div>\n\
<div class="result-section">\n\
<h3>Ports (<span id="portCount">0</span>)</h3>\n\
<div id="portList"></div>\n\
</div>\n\
<div class="result-section">\n\
<h3>Vulnerabilities (<span id="vulnCount">0</span>)</h3>\n\
<div id="vulnList"></div>\n\
</div>\n\
</div>\n\
</div>\n\
<script>\n\
let scanId = null;\n\
document.getElementById("scanForm").onsubmit = function(e) {\n\
e.preventDefault();\n\
const domain = document.getElementById("domain").value;\n\
fetch("/scan", {method:"POST", headers:{"Content-Type":"application/json"}, body:JSON.stringify({domain:domain})})\n\
.then(r => r.json())\n\
.then(data => {\n\
if(data.success) {\n\
scanId = data.scan_id;\n\
document.getElementById("progress").style.display = "block";\n\
checkProgress();\n\
} else alert("Error: " + data.error);\n\
});\n\
};\n\
function checkProgress() {\n\
if(!scanId) return;\n\
fetch("/status/" + scanId)\n\
.then(r => r.json())\n\
.then(data => {\n\
document.getElementById("progressFill").style.width = data.progress + "%";\n\
document.getElementById("progressText").textContent = data.current_task;\n\
if(data.status === "completed") {\n\
showResults(data.results);\n\
} else if(data.status !== "failed") {\n\
setTimeout(checkProgress, 2000);\n\
}\n\
});\n\
}\n\
function showResults(results) {\n\
document.getElementById("progress").style.display = "none";\n\
document.getElementById("results").style.display = "block";\n\
document.getElementById("subCount").textContent = results.subdomains.length;\n\
document.getElementById("subList").innerHTML = results.subdomains.map(s => "<div class=\\"result-item\\">" + s + "</div>").join("");\n\
document.getElementById("portCount").textContent = results.ports.length;\n\
document.getElementById("portList").innerHTML = results.ports.map(p => "<div class=\\"result-item\\">" + p.host + ":" + p.port + "</div>").join("");\n\
document.getElementById("vulnCount").textContent = results.vulnerabilities.length;\n\
document.getElementById("vulnList").innerHTML = results.vulnerabilities.map(v => "<div class=\\"result-item\\">" + v.info.name + "</div>").join("");\n\
}\n\
</script></body></html>"""\n\
\n\
class ScanManager:\n\
    def __init__(self, scan_id, domain):\n\
        self.scan_id = scan_id\n\
        self.domain = domain\n\
        self.status = "initializing"\n\
        self.progress = 0\n\
        self.current_task = "Starting scan"\n\
        self.results = {"subdomains": [], "ports": [], "vulnerabilities": []}\n\
\n\
def run_scan(scan_manager):\n\
    scan_manager.status = "running"\n\
    scan_manager.current_task = "Discovering subdomains"\n\
    scan_manager.progress = 25\n\
    time.sleep(2)\n\
    scan_manager.results["subdomains"] = [scan_manager.domain, f"www.{scan_manager.domain}", f"api.{scan_manager.domain}"]\n\
    scan_manager.current_task = "Scanning ports"\n\
    scan_manager.progress = 50\n\
    time.sleep(2)\n\
    scan_manager.results["ports"] = [{"host": scan_manager.domain, "port": 80}, {"host": scan_manager.domain, "port": 443}]\n\
    scan_manager.current_task = "Checking vulnerabilities"\n\
    scan_manager.progress = 75\n\
    time.sleep(2)\n\
    scan_manager.results["vulnerabilities"] = [{"info": {"name": "Demo Vulnerability"}}]\n\
    scan_manager.status = "completed"\n\
    scan_manager.progress = 100\n\
    scan_manager.current_task = "Scan complete"\n\
\n\
@app.route("/")\n\
def index():\n\
    return HTML\n\
\n\
@app.route("/scan", methods=["POST"])\n\
def start_scan():\n\
    data = request.get_json()\n\
    domain = data.get("domain", "").strip()\n\
    if not domain:\n\
        return jsonify({"success": False, "error": "Domain required"})\n\
    scan_id = str(uuid.uuid4())\n\
    scan_manager = ScanManager(scan_id, domain)\n\
    scans[scan_id] = scan_manager\n\
    threading.Thread(target=run_scan, args=(scan_manager,), daemon=True).start()\n\
    return jsonify({"success": True, "scan_id": scan_id})\n\
\n\
@app.route("/status/<scan_id>")\n\
def get_status(scan_id):\n\
    scan = scans.get(scan_id)\n\
    if not scan:\n\
        return jsonify({"error": "Scan not found"}), 404\n\
    return jsonify({\n\
        "status": scan.status,\n\
        "progress": scan.progress,\n\
        "current_task": scan.current_task,\n\
        "results": scan.results if scan.status == "completed" else {}\n\
    })\n\
\n\
@app.route("/health")\n\
def health():\n\
    return jsonify({"status": "ok"})\n\
\n\
if __name__ == "__main__":\n\
    print("üöÄ Attack Surface Scanner starting on port 5000")\n\
    app.run(host="0.0.0.0", port=5000, debug=False)\n\
' > /app/app.py

# Copy any additional files that exist
COPY . . 2>/dev/null || true

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Run the application
CMD ["python", "/app/app.py"]